diff --git a/giles/receiver/giles-receiver.pony b/giles/receiver/giles-receiver.pony
index f0fd771..df1ce7c 100644
--- a/giles/receiver/giles-receiver.pony
+++ b/giles/receiver/giles-receiver.pony
@@ -122,11 +122,11 @@ actor Main
 class ListenerNotify is TCPListenNotify
   let _coordinator: Coordinator
   let _store: Store
-  let _stderr: StdStream
+  let _stderr: OutStream
   let _no_write: Bool
 
   new iso create(coordinator: Coordinator,
-    store: Store, stderr: StdStream, no_write: Bool)
+    store: Store, stderr: OutStream, no_write: Bool)
   =>
     _coordinator = coordinator
     _store = store
@@ -145,13 +145,13 @@ class ListenerNotify is TCPListenNotify
 class Notify is TCPConnectionNotify
   let _coordinator: Coordinator
   let _store: Store
-  let _stderr: StdStream
+  let _stderr: OutStream
   var _header: Bool = true
   let _no_write: Bool
   var _closed: Bool = false
 
   new iso create(coordinator: Coordinator,
-    store: Store, stderr: StdStream, no_write: Bool)
+    store: Store, stderr: OutStream, no_write: Bool)
   =>
     _coordinator = coordinator
     _store = store
diff --git a/go_api/pony/go_api/state_computation.pony b/go_api/pony/go_api/state_computation.pony
index 1ee6a20..178a20c 100644
--- a/go_api/pony/go_api/state_computation.pony
+++ b/go_api/pony/go_api/state_computation.pony
@@ -96,14 +96,12 @@ class val StateComputationMulti is w.StateComputation[GoData, GoData, GoState]
     | 0 =>
       (None, state_changed_indicator)
     else
-      recover
-        let results = recover trn Array[GoData](size.usize()) end
-        for i in Range(0, size.usize()) do
-          results.push(GoData(@GetMultiResultItem(res, i.u64())))
-        end
-        RemoveComponent(res, ComponentType.data())
-        (consume results, state_changed_indicator)
+      let results = recover trn Array[GoData](size.usize()) end
+      for i in Range(0, size.usize()) do
+        results.push(GoData(@GetMultiResultItem(res, i.u64())))
       end
+      RemoveComponent(res, ComponentType.data())
+      (consume results, state_changed_indicator)
     end
 
   fun state_change_builders(): Array[StateChangeBuilder[GoState]] val =>
diff --git a/testing/tools/fix_generator/initial_nbbo_generator/initial_nbbo_generator.pony b/testing/tools/fix_generator/initial_nbbo_generator/initial_nbbo_generator.pony
index 8a44a3d..291fb50 100644
--- a/testing/tools/fix_generator/initial_nbbo_generator/initial_nbbo_generator.pony
+++ b/testing/tools/fix_generator/initial_nbbo_generator/initial_nbbo_generator.pony
@@ -122,7 +122,7 @@ actor InitialNbboFileGenerator
     _output_file_path = output_file_path
     _rejected_instruments = rejected_instruments
     _nonrejected_instruments = nonrejected_instruments
-    let date = Date(_time._1, _time._2)
+    let date = PosixDate(_time._1, _time._2)
     _utc_timestamp = date.format("%Y%m%d-%H:%M:%S.000")
 
   be generate_and_write() =>
diff --git a/testing/tools/fix_generator/nbbo_generator/nbbo_generator.pony b/testing/tools/fix_generator/nbbo_generator/nbbo_generator.pony
index d40a9e2..60619e7 100644
--- a/testing/tools/fix_generator/nbbo_generator/nbbo_generator.pony
+++ b/testing/tools/fix_generator/nbbo_generator/nbbo_generator.pony
@@ -150,7 +150,7 @@ actor NbboFilesGenerator
   be generate_for_sec(sec: U64) =>
     try
       var output_file = File(FilePath(_auth, _output_path)?)
-      let date = Date(_time._1 + sec.i64(), _time._2)
+      let date = PosixDate(_time._1 + sec.i64(), _time._2)
       let utc_timestamp = date.format("%Y%m%d-%H:%M:%S.000")
       for x in Range[U64](0, _output_msgs_per_sec) do
         output_file = check_output_file_size(output_file)?
diff --git a/testing/tools/fix_generator/orders_generator/order_generator.pony b/testing/tools/fix_generator/orders_generator/order_generator.pony
index a3f031d..63f6784 100644
--- a/testing/tools/fix_generator/orders_generator/order_generator.pony
+++ b/testing/tools/fix_generator/orders_generator/order_generator.pony
@@ -236,7 +236,7 @@ actor OrderFileGenerator
   let instruments_size = _instruments.size().u64()
   try
     var output_file = File(FilePath(_auth, _output_path)?)
-    let date = Date(_time._1 + sec.i64(), _time._2)
+    let date = PosixDate(_time._1 + sec.i64(), _time._2)
     let utc_timestamp = date.format("%Y%m%d-%H:%M:%S.000")
     for x in Range[U64](0, _output_msgs_per_sec) do
       output_file = check_output_file_size(output_file)?
diff --git a/testing/tools/merrick/merrick.pony b/testing/tools/merrick/merrick.pony
index b0b7d69..3dbec8b 100644
--- a/testing/tools/merrick/merrick.pony
+++ b/testing/tools/merrick/merrick.pony
@@ -117,13 +117,13 @@ actor Main
 class FromWallarooListenerNotify is TCPListenNotify
   let _coordinator: Coordinator
   let _store: Store
-  let _stderr: StdStream
+  let _stderr: OutStream
   let _forward: Bool
   let _forwarding_actor: (MsgForwarder | None)
 
 
   new iso create(coordinator: Coordinator,
-    store: Store, stderr: StdStream,
+    store: Store, stderr: OutStream,
     forward: Bool, forwarding_actor: (MsgForwarder | None))
   =>
     _coordinator = coordinator
@@ -148,14 +148,14 @@ class FromWallarooListenerNotify is TCPListenNotify
 class FromWallarooNotify is TCPConnectionNotify
   let _coordinator: Coordinator
   let _store: Store
-  let _stderr: StdStream
+  let _stderr: OutStream
   let _forward: Bool
   let _forwarding_actor: (MsgForwarder | None)
   var _header: Bool = true
   var _closed: Bool = false
 
   new iso create(coordinator: Coordinator,
-    store: Store, stderr: StdStream,
+    store: Store, stderr: OutStream,
     forward: Bool, forwarding_actor: (MsgForwarder | None))
   =>
     _coordinator = coordinator
diff --git a/utils/data_receiver/data_receiver.pony b/utils/data_receiver/data_receiver.pony
index 553f58c..6e44b10 100644
--- a/utils/data_receiver/data_receiver.pony
+++ b/utils/data_receiver/data_receiver.pony
@@ -73,7 +73,7 @@ actor Main
       usage(env.out)
     end
 
-  fun usage(out: StdStream) =>
+  fun usage(out: OutStream) =>
     out.print(
       "data_receiver [OPTIONS]\n" +
       "Required: \n" +
@@ -87,13 +87,13 @@ actor Main
       )
 
 class ListenerNotify is TCPListenNotify
-  let _stdout: StdStream
-  let _stderr: StdStream
+  let _stdout: OutStream
+  let _stderr: OutStream
   let _input_mode: InputMode
   let _output_mode: OutputMode
 
-  new iso create(stdout: StdStream,
-    stderr: StdStream,
+  new iso create(stdout: OutStream,
+    stderr: OutStream,
     input_mode: InputMode,
     output_mode: OutputMode)
   =>
@@ -109,13 +109,13 @@ class ListenerNotify is TCPListenNotify
     ConnectionNotify(_stdout, _stderr, _input_mode, _output_mode)
 
 class ConnectionNotify is TCPConnectionNotify
-  let _stdout: StdStream
-  let _stderr: StdStream
+  let _stdout: OutStream
+  let _stderr: OutStream
   let _input_mode: InputMode
   let _output_mode: OutputMode
   var _read_header: Bool = true
 
-  new iso create(so: StdStream, se: StdStream, i: InputMode, o: OutputMode) =>
+  new iso create(so: OutStream, se: OutStream, i: InputMode, o: OutputMode) =>
     _stdout = so
     _stderr = se
     _input_mode = i

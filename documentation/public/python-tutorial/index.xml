<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python API Introduction on Wallaroo</title>
    <link>https://docs.wallaroolabs.com/python-tutorial/</link>
    <description>Recent content in Python API Introduction on Wallaroo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.wallaroolabs.com/python-tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Debugging</title>
      <link>https://docs.wallaroolabs.com/python-tutorial/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/python-tutorial/debugging/</guid>
      <description>As you&amp;rsquo;re developing Python Wallaroo applications, there will come a time where you will need to do some debugging during your development process. Debugging can be as simple as inserting a print statement in your code (we even do it in our examples) or a bit more involved by using a debugger to get backtraces and such. In this section we&amp;rsquo;ll cover how to debug using print, an interactive debugger, and a remote debugger.</description>
    </item>
    
    <item>
      <title>Inter-worker Serialization and Resilience</title>
      <link>https://docs.wallaroolabs.com/python-tutorial/interworker-serialization-and-resilience/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/python-tutorial/interworker-serialization-and-resilience/</guid>
      <description>Wallaroo applications can scale horizontally by running multiple worker processes (ideally on different machines connected by a fast network). Worker processes send each other encoded objects, some of which may contain Python objects. Wallaroo provides serialization and deserialization based on the pickle module; if this is sufficient for your needs then you don&amp;rsquo;t need to write any serialization or deserialization code. If pickle is insufficient for your application (for example, if pickle is too slow or if you are using classes that cannot be serialized or deserialized with pickle) then you must provide your own serialize and deserialize functions that convert between objects and strings that represent those objects.</description>
    </item>
    
    <item>
      <title>Running A Wallaroo Application</title>
      <link>https://docs.wallaroolabs.com/python-tutorial/running-a-wallaroo-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/python-tutorial/running-a-wallaroo-application/</guid>
      <description>You should have already completed the setup instructions in the &amp;ldquo;Python Installation&amp;rdquo; guide.
  Running the Application Wallaroo uses an embedded Python runtime wrapped with a C API around it that lets Wallaroo execute Python code and read Python variables. So when machida --application-module my_application is run, machida (the binary we previously compiled), loads up the my_application.py module inside of its embedded Python runtime and executes its application_setup() function to retrieve the application topology it needs to construct in order to run the application.</description>
    </item>
    
    <item>
      <title>Starting a new shell</title>
      <link>https://docs.wallaroolabs.com/python-tutorial/starting-a-new-shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/python-tutorial/starting-a-new-shell/</guid>
      <description>In this section, we&amp;rsquo;re going to review how you can start a new shell for Wallaroo regardless of how you installed it.
Wallaroo in Docker For each Shell you&amp;rsquo;re expected to setup, you&amp;rsquo;d have to run the following to enter the Wallaroo Docker container:
Enter the Wallaroo Docker container:
 Python 2.7 Python 3  docker exec -it wally env-setup   docker exec -it wally env-setup -p python3    $(function(){$(&#34;</description>
    </item>
    
    <item>
      <title>TCP Decoders and Encoders</title>
      <link>https://docs.wallaroolabs.com/python-tutorial/tcp-decoders-and-encoders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/python-tutorial/tcp-decoders-and-encoders/</guid>
      <description>Earlier, we spoke of sources and sinks and the role they play in Wallaroo. In this section, we are going to dive more into how you work with sources and sinks. We&amp;rsquo;ll be covering two key concepts: Decoders and Encoders.
Reviewing our terms Source Ingress point for inputs from external systems into a Wallaroo application.
Sink Egress point for outputs from a Wallaroo application to external systems.
Decoder Code that transforms a stream of bytes from an external system into a series of application input types.</description>
    </item>
    
    <item>
      <title>Using Connectors as Sources &amp; Sinks</title>
      <link>https://docs.wallaroolabs.com/python-tutorial/using-connectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/python-tutorial/using-connectors/</guid>
      <description>This is a preview release of Wallaroo&amp;rsquo;s connectors feature that allows full customization of sources and sinks. These sources and sinks can be integrated into Wallaroo using libraries you&amp;rsquo;re already familiar with in Python. A number of built-in connectors offer a quick way to get started and hook up common stream types and they&amp;rsquo;re all available for easy customization.
Care has been taken to keep the API simple and the runtime assumptions unobtrusive so it&amp;rsquo;s easy to hook up the library to existing code.</description>
    </item>
    
    <item>
      <title>Wallaroo Python API Classes</title>
      <link>https://docs.wallaroolabs.com/python-tutorial/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/python-tutorial/api/</guid>
      <description>The Wallaroo Python API allows developers to create Wallaroo applications in Python, which can then be run by Machida.
Overview In order to create a Wallaroo application in Python, you need to create the functions and classes that provide the required interfaces for each stage in your pipeline, and then connect them together in a topology structure that is returned by the entry-point function application_setup. This function should always return the result of calling wallaroo.</description>
    </item>
    
    <item>
      <title>Wallaroo and Virtualenv</title>
      <link>https://docs.wallaroolabs.com/python-tutorial/virtualenv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/python-tutorial/virtualenv/</guid>
      <description>We recommend using virtualenv to handle your application&amp;rsquo;s dependencies.
While not required to run Wallaroo applications, virtualenv will ensure that your application and development environment are isolated from the rest of your Python installation(s) on your computer. In addition, virtualenv will ensure that Machida uses the correct version of Python if you have multiple versions installed on your computer.
Installing Virtualenv Follow the instructions on the virtualenv website.
Setting up Virtualenv for your Application To create a virtualenv for your application, run the following command</description>
    </item>
    
    <item>
      <title>Word Count</title>
      <link>https://docs.wallaroolabs.com/python-tutorial/word-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/python-tutorial/word-count/</guid>
      <description>Word count is the canonical streaming data application. It&amp;rsquo;s canonical not because everyone needs to count words but because it&amp;rsquo;s a good platform for demonstrating how to do many of the everyday tasks in a streaming application.
This section will take you through our Wallaroo word count example. Along the way, we will introduce you to two new concepts: receiving and decoding data on a TCPSource, and splitting one incoming message into several outgoing ones.</description>
    </item>
    
    <item>
      <title>Writing Your Own Application</title>
      <link>https://docs.wallaroolabs.com/python-tutorial/writing-your-own-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/python-tutorial/writing-your-own-application/</guid>
      <description>In this section, we will go over the components that are required in order to write a Wallaroo Python application. We will start with the stateless alerts.py application from the examples section, then move on to an application that maintains and modifies state and uses partitioning to divide its work.
A Stateless Application - Alerts The alerts.py application is going to receive transactions as its input stream, check for certain conditions that should trigger alerts, and then send out any triggered alerts to its sink.</description>
    </item>
    
    <item>
      <title>Writing Your Own Stateful Application</title>
      <link>https://docs.wallaroolabs.com/python-tutorial/writing-your-own-stateful-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/python-tutorial/writing-your-own-stateful-application/</guid>
      <description>In this section, we will go over how to write a stateful application with the Wallaroo Python API. If you haven&amp;rsquo;t reviewed the simple stateless Alerts application example yet, you can find it here.
A Stateful Application - Alphabet Our stateful application is going to add state to the Alerts example. Again, it receives as its inputs messages representing transactions. But now instead of statelessly checking individual transactions to see if they pass certain thresholds, it will add each transaction amount to a running total.</description>
    </item>
    
  </channel>
</rss>
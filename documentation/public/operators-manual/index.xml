<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operators Manual on Wallaroo</title>
    <link>https://docs.wallaroolabs.com/operators-manual/</link>
    <description>Recent content in Operators Manual on Wallaroo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.wallaroolabs.com/operators-manual/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Autoscale</title>
      <link>https://docs.wallaroolabs.com/operators-manual/autoscale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/operators-manual/autoscale/</guid>
      <description>Wallaroo is designed to support scale-independent development. It can adapt to changing demands by growing or shrinking to fit the available resources. You don’t have to update any code or bother with stopping your cluster and redeploying. This set of features is called “autoscale”.
With autoscale enabled, you can add or remove workers from a running cluster. We call these “grow to fit” and “shrink to fit”, respectively (referring to the fact that the cluster grows or shrinks to fit your current resource requirements).</description>
    </item>
    
    <item>
      <title>Command-Line Options</title>
      <link>https://docs.wallaroolabs.com/operators-manual/command-line-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/operators-manual/command-line-options/</guid>
      <description>Every Wallaroo option exposes a set of command-line options that are used to configure it. This document gives an overview of each of those options.
Command-Line Parameters When running a Wallaroo application, we use some of the following command line parameters (a star indicates it is required, a plus that it is required for multi-worker runs):
--control/-c *[Sets address for initializer control channel; sets control address to connect to for non-initializers] --data/-d *[Sets address for initializer data channel] --my-control [Optionally sets address for my data channel] --my-data [Optionally sets address for my data channel] --external/-e [Sets address for external message channel] --worker-count/-w +[Sets cluster initializers total number of workers, including cluster initializer itself] --name/-n +[Sets name for this worker.</description>
    </item>
    
    <item>
      <title>Resilience</title>
      <link>https://docs.wallaroolabs.com/operators-manual/resilience/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/operators-manual/resilience/</guid>
      <description>Wallaroo is designed with built-in resilience. However, since the operations involved with maintaining resilience can impact performance, this mode is off by default. For python users, we provide a separate binary with resilience enabled: machida-resilience (and machida3-resilience for Python 3) as part of the default installation. For Go and Ponyc users, to enable resilience in a Wallaroo application, the binary needs to be built with -D resilience if using the ponyc compiler directly, or with resilience=on if using our Makefile build system (as is the case with Machida).</description>
    </item>
    
    <item>
      <title>Running Wallaroo</title>
      <link>https://docs.wallaroolabs.com/operators-manual/running-wallaroo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/operators-manual/running-wallaroo/</guid>
      <description>A Wallaroo application is distributed over one or more Wallaroo processes, which we call &amp;ldquo;workers&amp;rdquo;. Any Wallaroo cluster will have one worker designated as the &amp;ldquo;cluster initializer&amp;rdquo;, a temporary role played during cluster initialization.
Workers communicate with each other over two channels: a control channel and a data channel. They send metrics data over TCP to an external metrics address. And they optionally listen for messages from external systems over an external channel.</description>
    </item>
    
    <item>
      <title>Wallaroo Metrics UI</title>
      <link>https://docs.wallaroolabs.com/operators-manual/metrics-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/operators-manual/metrics-ui/</guid>
      <description>In this section, we&amp;rsquo;ll introduce you to the Wallaroo Metrics UI. The Metrics UI is a tool to allow you to get soft real-time metric updates for any connected Wallaroo applications. The Metrics UI will provide you with a general and detailed performance overview of each running application.
Metrics are reported for 3 top level categories in a Wallaroo application: Pipelines, Workers, and Computations. Each top level category is an aggregation of elements in its own subcategory.</description>
    </item>
    
  </channel>
</rss>
- name: Put ssh private key onto server
  copy:
    src: "{{ ssh_key_file }}"
    dest: /home/{{ ansible_user_id }}/.ssh/id_rsa
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode: 0700
  when: (ansible_ssh_user != "root")

- name: Put ssh private key onto server
  copy:
    src: "{{ ssh_key_file }}"
    dest: /root/.ssh/id_rsa
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode: 0700
  when: (ansible_ssh_user == "root")

- name: Get groups for ssh user
  command: groups {{ ansible_ssh_user }}
  register: my_groups

- name: Add wallaroo group
  group: name=wallaroo state=present gid=1111

- name: Add wallaroo user
  user:
    name: wallaroo
    uid: 1111
    group: wallaroo
    shell: /bin/bash
    groups: "{{ my_groups.stdout.split(':')[1] | replace(' ', ',') }}"

- name: Copy ssh keys for wallaroo user
  command: creates=/home/wallaroo/.ssh cp -rf /home/{{ ansible_user_id }}/.ssh /home/wallaroo/
  when: (ansible_ssh_user != "root")

- name: Copy ssh keys for wallaroo user
  command: creates=/home/wallaroo/.ssh cp -rf /root/.ssh /home/wallaroo/
  when: (ansible_ssh_user == "root")

- name: Change ownership ssh keys for wallaroo user
  file: path=/home/wallaroo/.ssh owner=wallaroo group=wallaroo recurse=yes state=directory

- name: allow wallaroo user to sudo without password
  lineinfile:
    dest: /etc/sudoers
    regexp: '^wallaroo'
    line: 'wallaroo ALL=(ALL) NOPASSWD:ALL'
    state: present
    backup: true

- name: Install common packages
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
   - curl
   - libpcap0.8
   - python-boto
   - python-pip
   - python3
   - python3-pip
   - python3-numpy
   - less
   - dnsutils
   - net-tools
   - vim
   - wget
   - jq
   - sysstat
   - htop
   - numactl
   - cpuset
   - trace-cmd
   - stress-ng

- name: Install common packages
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
   - linux-tools-{{ ansible_kernel }}
  ignore_errors: yes

- name: Install python3 click
  pip: name=click executable=pip3

- name: Check if ptpd is installed
  stat: path=/usr/sbin/ptpd
  register: ptpd

- name: Get ptpd deb for armhf
  get_url:
     url: https://s3.amazonaws.com/sendence-dev/installers/ptpd/ptpd_2.3.2-master-1_armhf.deb
     dest: /tmp/ptpd_2.3.2-master-1_armhf.deb
     mode: 0755
  register: get_url_result
  until: get_url_result | succeeded
  retries: 5
  delay: 5
  when: ('arm' == '{{ ansible_architecture[0:3] }}') and (not ptpd.stat.exists)

- name: Install ptp for armhf
  apt: deb=/tmp/ptpd_2.3.2-master-1_armhf.deb
  when: ('arm' == '{{ ansible_architecture[0:3] }}') and (not ptpd.stat.exists)

- name: Get ptpd deb for x86_64
  get_url:
     url: https://s3.amazonaws.com/sendence-dev/installers/ptpd/ptpd_2.3.2-master-1_amd64.deb
     dest: /tmp/ptpd_2.3.2-master-1_amd64.deb
     mode: 0755
  register: get_url_result
  until: get_url_result | succeeded
  retries: 5
  delay: 5
  when: (ansible_architecture == "x86_64") and (not ptpd.stat.exists)

- name: Install ptp for x86_64
  apt: deb=/tmp/ptpd_2.3.2-master-1_amd64.deb
  when: (ansible_architecture == "x86_64") and (not ptpd.stat.exists)

- name: add llvm apt repo key
  apt_key:
    url: 'http://apt.llvm.org/llvm-snapshot.gpg.key'
    state: present
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: add llvm apt repo
  apt_repository:
    repo: 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.8 main'
    state: present
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: add llvm src apt repo
  apt_repository:
    repo: 'deb-src http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.8 main'
    state: present
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: Install dev packages
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
   - automake
   - autotools-dev
   - build-essential
   - file
   - git
   - libicu-dev
   - libncurses5-dev
   - libpcre3
   - libssl-dev
   - libxml2-dev
   - zlib1g-dev
   - software-properties-common
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: Download pcre2
  get_url:
    url: "http://downloads.sourceforge.net/project/pcre/pcre2/10.21/pcre2-10.21.tar.bz2"
    dest: "/tmp/pcre2-src.tbz2"
  register: get_url_result
  until: get_url_result | succeeded
  retries: 5
  delay: 5
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: Expand pcre2 archive
  unarchive:
    src: "/tmp/pcre2-src.tbz2"
    dest: "/tmp"
    creates: "/tmp/pcre2-10.21/README"
    copy: no
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: configure pcre2
  command: >
    ./configure prefix=/usr
    chdir=/tmp/pcre2-10.21
    creates=/tmp/pcre2-10.21/libtool
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: build pcre2
  command: >
    make
    chdir=/tmp/pcre2-10.21
    creates=/tmp/pcre2-10.21/pcre2test
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: install pcre2
  command: >
    make install
    chdir=/tmp/pcre2-10.21
    creates=/usr/bin/pcre2test
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: List ponyc custom C libs from S3
  s3:
    mode=list
    bucket=sendence-dev
    prefix=ponyc_external_dependencies/
  delegate_to: 127.0.0.1
  become: no
  register: s3_bucket_items

- name: Filter list of ponyc custom C libs (amd64)
  set_fact:
    custom_libs: "{{ s3_bucket_items.s3_keys | select('search', '/amd64') | list }}"
  when: (ansible_architecture == "x86_64")

- name: Filter list of ponyc custom C libs (armhf)
  set_fact:
    custom_libs: "{{ s3_bucket_items.s3_keys | select('search', '/armhf') | list }}"
  when: ('arm' == '{{ ansible_architecture[0:3] }}')

- name: download ponyc custom C libs from S3
  get_url:
     url: https://s3.amazonaws.com/sendence-dev/{{ item }}
     dest: /tmp/{{ item | basename }}
     mode: 0755
  with_items: custom_libs
  register: get_url_result
  until: get_url_result | succeeded
  retries: 5
  delay: 5

- name: unarchive ponyc custom C libs
  unarchive:
    src=/tmp/{{ item | basename }}
    dest=/usr/
    copy=no
  with_items: custom_libs

- name: create cpu shield
  script: create_cpu_shield.sh {{ system_cpus if system_cpus is defined else "" }} > /create_cpu_shield.out
  when: ('vagrant' != '{{ ansible_ssh_user }}')

- name: apply kernel tweaks
  script: kerneltweaks.sh > /kerneltweaks.out
  when: ('vagrant' != '{{ ansible_ssh_user }}')


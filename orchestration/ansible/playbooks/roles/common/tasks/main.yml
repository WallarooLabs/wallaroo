- name: setup isolcpus boot param
  lineinfile:
    dest: /etc/default/grub.d/50-cloudimg-settings.cfg
    regexp: '(^GRUB_CMDLINE_LINUX_DEFAULT="(\s*(?!isolcpus)[\w=/\-\.]+)*\s*)"\s*$'
    line: '\1 isolcpus={{ num_system_cpus }}-{{ ansible_processor_vcpus - 1 }}"'
    backrefs: true
    state: present
    backup: true
  register: grubfile
  when: ({{ 'vagrant' != ansible_ssh_user }} and {{ num_system_cpus is defined }} and {{ isolcpus is defined }} and {{ isolcpus == 'true' }})

- name: remove isolcpus boot param if it exists
  lineinfile:
    dest: /etc/default/grub.d/50-cloudimg-settings.cfg
    regexp: '(^GRUB_CMDLINE_LINUX_DEFAULT=".*)isolcpus.*"$'
    line: '\1"'
    backrefs: true
    state: present
    backup: true
  register: grubfile2
  when: ({{ 'vagrant' != ansible_ssh_user }} and ({{ isolcpus is not defined }} or ({{ isolcpus is defined }} and {{ isolcpus != 'true' }})))

- name: update grub
  command: update-grub
  when: ('vagrant' != '{{ ansible_ssh_user }}' and {{ num_system_cpus is defined }} and (grubfile|changed or grubfile2|changed))

- name: reboot to apply isolcpus boot param
  shell: sleep 2 && /sbin/shutdown -r now "Apply isolcpus boot param"
  when: ('vagrant' != '{{ ansible_ssh_user }}' and {{ num_system_cpus is defined }} and (grubfile|changed or grubfile2|changed))
  async: 1
  poll: 0
  ignore_errors: true

- name: waiting for server to come back
  local_action: wait_for host={{ inventory_hostname }} state=started delay=30 timeout=300 port=22
  become: false
  when: ('vagrant' != '{{ ansible_ssh_user }}' and {{ num_system_cpus is defined }} and (grubfile|changed or grubfile2|changed))

- name: Get groups for ssh user
  command: groups {{ ansible_ssh_user }}
  register: my_groups

- name: Add sendence group
  group: name=sendence state=present gid=1111

- name: Add sendence user
  user:
    name: sendence
    uid: 1111
    group: sendence
    shell: /bin/bash
    groups: "{{ my_groups.stdout.split(':')[1] | replace(' ', ',') }}"

- name: Copy ssh keys for sendence user
  command: creates=/home/sendence/.ssh cp -rf /home/{{ ansible_user_id }}/.ssh /home/sendence/
  when: (ansible_architecture == "x86_64")

- name: Copy ssh keys for sendence user
  command: creates=/home/sendence/.ssh cp -rf /root/.ssh /home/sendence/
  when: ('arm' == '{{ ansible_architecture[0:3] }}')

- name: Change ownership ssh keys for sendence user
  file: path=/home/sendence/.ssh owner=sendence group=sendence recurse=yes state=directory

- name: Install common packages
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
   - curl
   - libpcap0.8
   - python-boto
   - python-pip
   - python3
   - python3-pip
   - python3-numpy
   - less
   - dnsutils
   - net-tools
   - vim
   - wget
   - jq
   - sysstat
   - htop
   - numactl
   - cpuset
   - linux-tools-{{ ansible_kernel }}
   - trace-cmd
   - stress-ng

- name: Install python3 click
  pip: name=click executable=pip3

- name: Check if ptpd is installed
  stat: path=/usr/sbin/ptpd
  register: ptpd

- name: Get ptpd deb for armhf
  get_url:
     url: https://s3.amazonaws.com/sendence-dev/installers/ptpd/ptpd_2.3.2-master-1_armhf.deb
     dest: /tmp/ptpd_2.3.2-master-1_armhf.deb
     mode: 0755
  when: ('arm' == '{{ ansible_architecture[0:3] }}') and (not ptpd.stat.exists)

- name: Install ptp for armhf
  apt: deb=/tmp/ptpd_2.3.2-master-1_armhf.deb
  when: ('arm' == '{{ ansible_architecture[0:3] }}') and (not ptpd.stat.exists)

- name: Get ptpd deb for x86_64
  s3: bucket=sendence-dev object=/installers/ptpd/ptpd_2.3.2-master-1_amd64.deb dest=/tmp/ptpd_2.3.2-master-1_amd64.deb mode=get
  when: (ansible_architecture == "x86_64") and (not ptpd.stat.exists)

- name: Install ptp for x86_64
  apt: deb=/tmp/ptpd_2.3.2-master-1_amd64.deb
  when: (ansible_architecture == "x86_64") and (not ptpd.stat.exists)

- name: List ponyc custom C libs from S3
  s3:
    mode=list
    bucket=sendence-dev
    prefix=ponyc_external_dependencies/
  register: s3_bucket_items

- name: Filter list of ponyc custom C libs (amd64)
  set_fact:
    custom_libs: "{{ s3_bucket_items.s3_keys | select('search', '/amd64') | list }}"
  when: (ansible_architecture == "x86_64")

- name: Filter list of ponyc custom C libs (armhf)
  set_fact:
    custom_libs: "{{ s3_bucket_items.s3_keys | select('search', '/armhf') | list }}"
  when: ('arm' == '{{ ansible_architecture[0:3] }}')

- name: download ponyc custom C libs from S3
  s3:
    mode=get
    bucket=sendence-dev
    object={{ item }}
    dest=/tmp/{{ item | basename }}
  with_items: custom_libs

- name: unarchive ponyc custom C libs
  unarchive:
    src=/tmp/{{ item | basename }}
    dest=/usr/
    copy=no
  with_items: custom_libs

- name: apply kernel tweaks
  script: kerneltweaks.sh > /kerneltweaks.out
  when: ('vagrant' != '{{ ansible_ssh_user }}')

- name: create cpu shield
  script: create_cpu_shield.sh {{ num_system_cpus }} > /create_cpu_shield.out
  when: ('vagrant' != '{{ ansible_ssh_user }}' and {{ num_system_cpus is defined }})

